generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                  Int                  @id @default(autoincrement())
  username            String               @unique
  email               String?              @unique
  password            String?
  phone               String?              @unique
  github_id           Int?                 @unique
  avatar              String?              @default("https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg")
  created_at          DateTime             @default(now())
  updated_at          DateTime             @updatedAt
  availableModels     String?
  bio                 String?              @db.Text
  dailyExpLimit       Int                  @default(100)
  evaluationCount     Int                  @default(0)
  evaluationRating    Float                @default(0)
  exp                 Int                  @default(0)
  failedLoginAttempts Int                  @default(0)
  isAdult             Boolean              @default(false)
  isVerified          Boolean              @default(false)
  lastActive          DateTime?
  lastExpReset        DateTime             @default(now())
  lastLogin           DateTime?
  level               Int                  @default(1)
  lockedUntil         DateTime?
  name                String?
  points              Int                  @default(0)
  rank                String               @default("bronze")
  rating              Float                @default(0)
  ratingCount         Int                  @default(0)
  role                String               @default("user")
  todayExp            Int                  @default(0)
  totalCreated        Int                  @default(0)
  totalLikes          Int                  @default(0)
  totalViews          Int                  @default(0)
  badges              UserBadge[]
  achievements        UserAchievement[]
  certifications      UserCertification[]
  tokens              SMSToken[]
  aiImages            AIImage[]
  aiVideos            AIVideo[]
  imageComments       ImageComment[]
  videoComments       VideoComment[]
  imageLikes          ImageLike[]
  videoLikes          VideoLike[]
  requests            Request[]
  requestComments     RequestComment[]
  requestProposals    RequestProposal[]
  posts               Post[]
  comments            Comment[]
  likes               Like[]
  chatRooms           ChatRoom[]
  messages            Message[]
  transactions        Transaction[]
  notifications       Notification[]
  donations           Donation[]
  expActivities       ExpActivity[]
  rankEvaluations     RankEvaluation[]
  rankEvaluationVotes RankEvaluationVote[]
  pointHistory        PointTransaction[]
  blockedUsers        User[]               @relation("UserBlocks")
  blockedBy           User[]               @relation("UserBlocks")
  reports             Report[]             @relation("UserReports")

  @@index([role])
  @@index([created_at])
}

model SMSToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AIImage {
  id             Int            @id @default(autoincrement())
  title          String
  description    String?        @db.Text
  price          Float?
  category       String
  tags           String?
  fileUrl        String
  thumbnailUrl   String
  width          Int
  height         Int
  format         String
  prompt         String         @db.Text
  negativePrompt String?        @db.Text
  model          String
  settings       String?
  steps          Int?
  cfgScale       Float?
  sampler        String?
  vae            String?
  views          Int            @default(0)
  downloads      Int            @default(0)
  isPublic       Boolean        @default(false)
  isFeatured     Boolean        @default(false)
  isPermanent    Boolean        @default(false)
  isAdult        Boolean        @default(false)
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  userId         Int
  status         String         @default("active")
  reportCount    Int            @default(0)
  searchText     String?        @db.Text
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments       ImageComment[]
  likes          ImageLike[]
  reports        Report[]       @relation("ImageReports")

  @@index([userId])
  @@index([category])
  @@index([created_at])
  @@fulltext([searchText])
}

model ImageComment {
  id         Int      @id @default(autoincrement())
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  userId     Int
  imageId    Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  image      AIImage  @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([imageId])
}

model ImageLike {
  created_at DateTime @default(now())
  userId     Int
  imageId    Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  image      AIImage  @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@id([userId, imageId])
  @@index([imageId])
}

model AIVideo {
  id           Int            @id @default(autoincrement())
  title        String
  description  String         @db.Text
  fps          Int
  price        Float?
  category     String
  tags         String?
  fileUrl      String
  thumbnailUrl String
  previewUrl   String?
  width        Int
  height       Int
  duration     Float
  format       String
  prompt       String         @db.Text
  model        String
  settings     String?
  views        Int            @default(0)
  downloads    Int            @default(0)
  isPublic     Boolean        @default(true)
  isFeatured   Boolean        @default(false)
  isAdult      Boolean        @default(false)
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  userId       Int
  status       String         @default("active")
  reportCount  Int            @default(0)
  searchText   String?        @db.Text
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments     VideoComment[]
  likes        VideoLike[]
  reports      Report[]       @relation("VideoReports")

  @@index([userId])
  @@index([category])
  @@index([created_at])
  @@fulltext([searchText])
}

model VideoComment {
  id         Int      @id @default(autoincrement())
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  userId     Int
  videoId    Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video      AIVideo  @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([videoId])
}

model VideoLike {
  created_at DateTime @default(now())
  userId     Int
  videoId    Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video      AIVideo  @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@id([userId, videoId])
  @@index([videoId])
}

model Request {
  id             Int               @id @default(autoincrement())
  title          String
  description    String            @db.Text
  budget         Float?
  deadline       DateTime?
  status         String            @default("pending")
  type           String
  category       String
  reference      String?
  requirements   String?           @db.Text
  preferredModel String?
  styleReference String?
  views          Int               @default(0)
  isPublic       Boolean           @default(true)
  isPriority     Boolean           @default(false)
  created_at     DateTime          @default(now())
  updated_at     DateTime          @updatedAt
  userId         Int
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments       RequestComment[]
  proposals      RequestProposal[]

  @@index([userId])
  @@index([type])
  @@index([category])
  @@index([status])
  @@index([created_at])
}

model RequestComment {
  id         Int      @id @default(autoincrement())
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  userId     Int
  requestId  Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  request    Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([requestId])
}

model RequestProposal {
  id         Int      @id @default(autoincrement())
  content    String   @db.Text
  price      Float
  duration   Int
  status     String   @default("pending")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  userId     Int
  requestId  Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  request    Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([requestId])
}

model AIModel {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  type        String
  version     String
  description String   @db.Text
  features    String?
  pricing     Float?
  isActive    Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@index([type])
}

model Post {
  id            Int       @id @default(autoincrement())
  title         String
  views         Int       @default(0)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  userId        Int
  type          String
  content       String    @db.Text
  commentsCount Int       @default(0)
  likesCount    Int       @default(0)
  category      String
  isAdult       Boolean   @default(false)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments      Comment[]
  likes         Like[]

  @@index([userId])
  @@index([type])
  @@index([category])
  @@index([created_at])
}

model Comment {
  id         Int      @id @default(autoincrement())
  content    String   @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  userId     Int
  postId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([postId])
  @@index([created_at])
}

model Like {
  id         Int      @id @default(autoincrement())
  type       String   @default("like")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  postId     Int
  userId     Int
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}

model ChatRoom {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  users      User[]
  messages   Message[]

  @@index([created_at])
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  chatRoomId String
  userId     Int
  room       ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([chatRoomId])
  @@index([created_at])
}

model Transaction {
  id            Int      @id @default(autoincrement())
  amount        Float
  type          String
  status        String
  paymentMethod String?
  currency      String   @default("KRW")
  receiptUrl    String?
  metadata      String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  userId        Int
  requestId     Int?
  productId     Int?
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([requestId])
  @@index([productId])
  @@index([created_at])
}

model Tag {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  type       String
  count      Int      @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Notification {
  id         Int      @id @default(autoincrement())
  type       String
  title      String
  content    String
  isRead     Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([created_at])
}

model Achievement {
  id           Int               @id @default(autoincrement())
  title        String
  description  String
  category     String
  points       Int
  requirements String
  icon         String
  created_at   DateTime          @default(now())
  updated_at   DateTime          @updatedAt
  users        UserAchievement[]

  @@index([category])
  @@index([created_at])
}

model UserAchievement {
  id            Int         @id @default(autoincrement())
  achievedAt    DateTime    @default(now())
  userId        Int
  achievementId Int
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId])
  @@index([achievementId])
}

model Badge {
  id           Int         @id @default(autoincrement())
  name         String      @unique
  description  String
  icon         String
  type         String
  tier         String?
  rarity       String
  requirements String?
  eventId      Int?
  startDate    DateTime?
  endDate      DateTime?
  isLimited    Boolean     @default(false)
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt
  users        UserBadge[]

  @@index([type])
  @@index([rarity])
  @@index([eventId])
  @@index([created_at])
}

model UserBadge {
  id             Int      @id @default(autoincrement())
  isActive       Boolean  @default(true)
  earnedAt       DateTime @default(now())
  source         String
  sourceId       Int?
  donationAmount Float?
  userId         Int
  badgeId        Int
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge          Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
  @@index([userId])
  @@index([source])
  @@index([badgeId])
}

model Donation {
  id           Int      @id @default(autoincrement())
  amount       Float
  message      String?
  isAnonymous  Boolean  @default(false)
  created_at   DateTime @default(now())
  userId       Int
  badgeAwarded Boolean  @default(false)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([amount])
  @@index([created_at])
}

model Certification {
  id          Int                 @id @default(autoincrement())
  title       String
  description String
  level       Int
  type        String
  created_at  DateTime            @default(now())
  updated_at  DateTime            @updatedAt
  users       UserCertification[]

  @@index([type])
  @@index([level])
  @@index([created_at])
}

model UserCertification {
  id              Int           @id @default(autoincrement())
  status          String        @default("pending")
  score           Int?
  certifiedAt     DateTime?
  expiresAt       DateTime?
  userId          Int
  certificationId Int
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  certification   Certification @relation(fields: [certificationId], references: [id], onDelete: Cascade)

  @@unique([userId, certificationId])
  @@index([userId])
  @@index([certificationId])
}

model ExpActivity {
  id         Int      @id @default(autoincrement())
  type       String
  expAmount  Int
  created_at DateTime @default(now())
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([created_at])
}

model RankEvaluation {
  id              Int                  @id @default(autoincrement())
  targetRank      String
  status          String               @default("pending")
  contentType     String
  contentId       Int
  totalScore      Float                @default(0)
  evaluationCount Int                  @default(0)
  requiredScore   Float
  created_at      DateTime             @default(now())
  updated_at      DateTime             @updatedAt
  userId          Int
  user            User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  evaluations     RankEvaluationVote[]

  @@index([userId])
  @@index([status])
  @@index([targetRank])
  @@index([contentType, contentId])
  @@index([created_at])
}

model RankEvaluationVote {
  id           Int            @id @default(autoincrement())
  score        Float
  comment      String?
  created_at   DateTime       @default(now())
  evaluationId Int
  evaluatorId  Int
  evaluation   RankEvaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)
  evaluator    User           @relation(fields: [evaluatorId], references: [id], onDelete: Cascade)

  @@unique([evaluationId, evaluatorId])
  @@index([evaluationId])
  @@index([evaluatorId])
}

model Report {
  id          Int      @id @default(autoincrement())
  type        String
  reason      String
  description String?  @db.Text
  status      String   @default("pending")
  targetId    Int
  targetType  String
  reporterId  Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  reporter    User     @relation("UserReports", fields: [reporterId], references: [id], onDelete: Cascade)
  image       AIImage? @relation("ImageReports", fields: [targetId], references: [id], map: "Report_image_fkey")
  video       AIVideo? @relation("VideoReports", fields: [targetId], references: [id], map: "Report_video_fkey")

  @@index([targetType, targetId])
  @@index([status])
  @@index([reporterId])
  @@index([targetId])
}

model PointTransaction {
  id          Int      @id @default(autoincrement())
  amount      Int
  type        String
  description String
  balance     Int
  userId      Int
  created_at  DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([created_at])
}

model ChatRoomToUser {
  A String
  B Int

  @@unique([A, B], map: "_ChatRoomToUser_AB_unique")
  @@index([B], map: "_ChatRoomToUser_B_index")
  @@map("_ChatRoomToUser")
}

model UserBlocks {
  A Int
  B Int

  @@unique([A, B], map: "_UserBlocks_AB_unique")
  @@index([B], map: "_UserBlocks_B_index")
  @@map("_UserBlocks")
}
